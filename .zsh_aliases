#####################################
####   Frequently used aliases   ####
#####################################
# ubuntu thing
command -v batcat >/dev/null && alias bat='batcat'
alias cat='bat --paging=never --style=plain --theme="Visual Studio Dark+"'
alias clr='clear'
alias cursor-hide="printf '\e[?25l'"
alias cursor-show="printf '\e[?25h'"
alias please='sudo '
alias vi=nvim
alias vim=nvim
alias ls='lsd'
alias la='ls -a'
alias lls='ls -la'
alias ll='ls -l'
alias lt='ls --tree'
alias grep='grep --color=auto'
alias diff='diff --color=auto'
alias yay="echo 'USE PARU IDIOT' && paru"
alias termbin='nc termbin.com 9999'
alias xclip-i='xclip -i -selection clipboard'
alias xclip-o='xclip -o -selection clipbloard'
alias ytdl='youtube-dl'
alias now="date --rfc-3339=seconds | sed 's/ /T/g'"
alias utcnow="date -u --rfc-3339=seconds | sed 's/ /T/g'"
alias yta='youtube-dl -i --extract-audio --audio-format best --audio-quality 0'
alias myip='curl -sL "https://api.ipify.org"; echo'
alias load-aliases='. ~/.zsh_aliases'
#-- Global --#
alias -g C='| xclip -i -selection clipboard'
alias -g P='xclip -o -selection clipboard'
alias -g L='| less'
alias -g H='| head'
alias -g T='| tail'
alias -g G='| grep'
alias -g N='>/dev/null'
#-- Suffix --#
alias -s html='$BROWSER'
alias -s com='$BROWSER'
alias -s org='$BROWSER'
alias -s .git='git clone'

##############################
####   Simple functions   ####
##############################

# omz update with plugins
omz-update () {
    omz update
    local current_dir=$(pwd)
    local plugin_dir=${ZSH_CUSTOM}/plugins
    cd "$plugin_dir"
    for x in */; do
        cd "${plugin_dir}/${x}"
        git pull
        if [[ $? -ne 0 ]]; then
            break
        fi
    done
    cd "$current_dir"
}

# cowsay / figlet thing
cowfig() {
    figlet -f $(ls /usr/share/figlet/fonts/*.flf | shuf -n 1) $@ | cowsay -n -f $(ls /usr/share/cows/*.cow | shuf -n 1) | lolcat
}

# Use curl and jq to search for packages in the AUR
aursearch() {
    curl -sSL "https://aur.archlinux.org/rpc/?v=5&type=search&arg=$@" | jq -r '.results[]'
}

# Use awk as a calculator
calc () {
    awk "BEGIN {print $@}"
}

# Use owlbot.info to get definitions; requires jq
define () {
    curl -sL "https://owlbot.info/api/v4/dictionary/"$1"?format=json" -H "Authorization: Token ${OWLBOT_API_KEY}" | jq -r '.'
}

# Output GitHub commits and messages for chosen repo; requires jq
gitcommits () {
    wget -qO - "https://api.github.com/repos/$1/$2/commits" | jq -r '.[] | .sha, .commit.message' | paste -sd ' \n' | tail -n +2
}

# get the first google result and info about it using w3.org's html2txt and document-parser-api.lateral.io; requires perl and jq
google () {
    SEARCH_QUERY="$(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$@")"
    RESULT_URL="$(curl -sL "https://www.w3.org/services/html2txt?url=https%3A%2F%2Fwww.google.com%2Fsearch%3Fq%3D$SEARCH_QUERY&noinlinerefs=on&nonums=on&endrefs=on" | grep -m1 'url?q=' | \
    sed 's%  26\. https:\/\/www\.google\.com\/url?q=%%g;s%&sa=.*%%g')"
    echo -e "Google Result for '$@':\n$RESULT_URL"
    URL_ENCODED="$(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$RESULT_URL")"
    INFO_JSON="$(curl -sL "https://document-parser-api.lateral.io/?url=$URL_ENCODED&subscription-key=1ce62f323290e0eea861d171bb32a001")"
    echo -e "Title: $(echo "$INFO_JSON" | jq -r '.title')"
    echo -e "Description:\n$(echo "$INFO_JSON" | jq -r '.description')"
}

# Use wttr.in to output weather
weather () {
    LOCATION="$1"
    FLOCATION="$2"
    case $1 in
        0*)
            if [ -z "$FLOCATION" ]; then
                FLOCATION="$location"
            fi
            tput reset
            curl "wttr.in/$FLOCATION?0"
            LOCATION=""
            FLOCATION=""
            ;;
        1*)
            if [ -z "$FLOCATION" ]; then
                FLOCATION="$location"
            fi
            tput reset
            curl "wttr.in/$FLOCATION?1"
            LOCATION=""
            FLOCATION=""
            ;;
        2*)
            if [ -z "$FLOCATION" ]; then
                FLOCATION="$location"
            fi
            tput reset
            curl "wttr.in/$FLOCATION?2"
            LOCATION=""
            FLOCATION=""
            ;;
        *)
            if [ -z "$LOCATION" ]; then
                LOCATION="$location"
            fi
            tput reset
            curl "wttr.in/$LOCATION"
            LOCATION=""
    esac
}
alias wttr='weather'

help () {
    curl -s "https://cht.sh/$@"
}

downforme() {
    wget -qO - "http://downforeveryoneorjustme.com/$1" | grep -qo "It's just you" && echo -e "$(tput setaf 1)It's just you.\n$(tput setaf 2)$1 is up.$(tput sgr0)" || echo -e "$(tput setaf 3)It's not just you! \n$(tput setaf 1)$1 looks down from here.$(tput sgr0)"
}

## URLS
urlencode () {
    perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$@"
    echo
}

urldecode () {
    perl -MURI::Escape -e 'print uri_unescape($ARGV[0]);' "$@"
    echo
}

# Translate with Google API
translate () {
    t_query="$(urlencode $@)"
    curl -sL -H "User-Agent: nc/0.0.1" "https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=en&dt=t&ie=UTF-&q=$t_query" | jq -r '.[0][0][0]'
}

# Decompress any archive type
x () {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.*|*.tar)
                tar -xf "$1"
                ;;
            *.bz2)
                bunzip2 "$1"
                ;;
            *.rar)
                unrar x "$1"
                ;;
            *.gz)
                gunzip "$1"
                ;;
            *.jar|*.zip)
                unzip "$1"
                ;;
            *.Z)
                uncompress "$1"
                ;;
            *.deb)
                ar x "$1"
                ;;
            *)
                echo "'$1' cannot be extracted"
                ;;
        esac
    else
        echo "'$1' is not a file"
    fi
}

# use awk for regex replacements
regex () {
    awk "{gsub(/$1/,\"$2\")}1"
}

# convert to and from binary
binary-convert () {
    case $1 in
        -b|b)
            shift
            echo "$@" | perl -lpe '$_=join " ", unpack"(B8)*"'
            ;;
        -a|a)
            shift
            echo "$@" | perl -lape '$_=pack"(B8)*",@F'
            ;;
        0*|1*)
            echo "$@" | perl -lape '$_=pack"(B8(*",@F'
            ;;
        *)
            echo "$@" | perl -lpe '$_=join " ", unpack"(B8)*"'
            ;;
    esac
}
